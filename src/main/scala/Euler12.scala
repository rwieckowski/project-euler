/**
The sequence of triangle numbers is generated by adding the natural 
numbers So the 7<sup>th</sup> triangle number would be 1 + 2 + 3 + 4 + 5 +
6 + 7 = 28. The first ten terms would be:
<p>
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
<p>
Let us list the factors of the first seven triangle numbers
<blockquote style="font-family:courier new;">
<b> 1</b>: 1<br/>
<b> 3</b>: 1, 3<br/>
<b> 6</b>: 1, 2, 3, 6<br/>
<b>10</b>: 1, 2, 5, 10<br/>
<b>15</b>: 1, 3, 5, 15<br/>
<b>21</b>: 1, 3, 7, 21<br/>
<b>28</b>: 1, 2, 4, 7, 14, 28<br/>
</blockquote>
<p>
We can see that 28 is the first triangle number to have over five 
divisors
<p>
What is the value of the first triangle number to have over five 
hundred divisors
*/
object Euler12 extends App {
  println("Euler 12")

  lazy val triangles: Stream[Int] = 1 #:: Stream.from(2).zip(triangles).map { case (a, b) => a + b }
  def divisors(n: Int) = 1 :: (2 to n).takeWhile(d => d * d <= n).filter(n % _ == 0).flatMap(d => List(d, n / d).distinct).toList
  def triangleWithDivisors(d: Int) = triangles.dropWhile(divisors(_).size < d).head
  println(triangleWithDivisors(5))
  println(triangleWithDivisors(500))
}